import logging
import asyncio
import requests
import json
from hashlib import md5
from telegram import Bot
from telegram.error import TelegramError
from config import TELEGRAM_BOT_TOKEN, CHANNEL_ID, OWNER_ID, IOINTELLIGENCE_API_KEY

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("car_facts_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


MODELS_API_URL = "https://api.intelligence.io.solutions/api/v1/models"
CHAT_API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"

AVAILABLE_MODELS = [
    "microsoft/Phi-3.5-mini-instruct"
]


published_facts = set()

def get_model_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    headers = {
        "accept": "application/json",
        "Authorization": f"Bearer {IOINTELLIGENCE_API_KEY}",  
    }
    try:
        response = requests.get(MODELS_API_URL, headers=headers)
        return [model['id'] for model in response.json() if 'id' in model]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return AVAILABLE_MODELS  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def generate_unique_fact(model: str, attempt=0):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã"""
    if attempt > 3: 
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
    
    headers = {
        "accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": f"Bearer {IOINTELLIGENCE_API_KEY}",
    }

    prompt = (
        "–ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö. "
        "–§–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n"
        "- –î–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º\n"
        "- –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π\n"
        "- –ö–æ—Ä–æ—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
        "- –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º\n"
        "- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n\n"
        "–í–∞–∂–Ω–æ: —Ñ–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!"
    )

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.8 + attempt*0.1,
        "max_tokens": 150
    }

    try:
        response = requests.post(CHAT_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        fact = response.json()['choices'][0]['message']['content'].strip()
        fact_hash = md5(fact.encode()).hexdigest()
        
        if fact_hash in published_facts:
            logger.info(f"–§–∞–∫—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
            return await generate_unique_fact(model, attempt+1)
            
        published_facts.add(fact_hash)
        return fact
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
        raise

async def send_message(bot: Bot, chat_id: int, text: str):
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def post_car_fact(bot: Bot, model: str):
    try:
        fact = await generate_unique_fact(model)
        post_text = f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}\n\n#–∞–≤—Ç–æ #—Ñ–∞–∫—Ç—ã"
        
        await send_message(bot, CHANNEL_ID, post_text)
        await send_message(
            bot, 
            OWNER_ID,
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n–ú–æ–¥–µ–ª—å: {model}\n–§–∞–∫—Ç: {fact}\n"
            f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤: {len(published_facts)}"
        )
    except Exception as e:
        await send_message(bot, OWNER_ID, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    models = get_model_list() or AVAILABLE_MODELS
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    await send_message(
        bot, 
        OWNER_ID, 
        f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models)}\n"
        f"–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞: {models[0]}"
    )
    
    current_model_index = 0
    while True:
        try:
            model = models[current_model_index]
            await post_car_fact(bot, model)
            
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        
        await asyncio.sleep(3*60*60)  # 3 —á–∞—Å–∞

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")